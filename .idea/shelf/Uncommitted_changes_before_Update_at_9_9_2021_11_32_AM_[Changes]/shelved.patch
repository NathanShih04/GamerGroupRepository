Index: templates/clicker.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n\r\n<!-- Search for all the Hack: below for hack-a-thon and mini-lab requirements -->\r\n\r\n<!-- Hack: Build form to drive bit size dynamic updates\r\n           use HTML Input Form in Frontend, ie toward top of Page\r\n           send initial value and updated values to form via Python render_template -->\r\n<!-- Hack: use 8 as default -->\r\n{% set BITS = 8 %}\r\n{% set MAX = ((2 ** BITS) - 1) %}\r\n\r\n<!-- Hack: Set bulbs and pass as variables via Python render_template\r\n           add new images (ie PNGs) to project -->\r\n<!-- use your PNGs as default -->\r\n{% set imgBulbOn = \"/static/assets/bulb_on.gif\" %}\r\n{% set imgBulbOff = \"/static/assets/bulb_off.png\" %}\r\n{% set msgTurnOn = \"Turn On\" %}\r\n{% set msgTurnOff = \"Turn Off\" %}\r\n\r\n{% block meta %}\r\n    <title>Binary page</title>\r\n    <script>\r\n        const BITS = '{{ BITS }}'; let max = '{{ MAX }}'; let MAX = parseInt(max, 10);\r\n        // return string with current value of each bit\r\n        function getBits() {\r\n            let bits = \"\";\r\n            for(let i = 0; i < BITS; i++) {\r\n                bits = bits + document.getElementById('digit' + i).value;\r\n            }\r\n            return bits;\r\n        }\r\n        // setter for DOM values\r\n        function setConversions(binary) {\r\n            document.getElementById('binary').innerHTML = binary;\r\n            // DOM assignment to Octal conversion\r\n            document.getElementById('octal').innerHTML = parseInt(binary, 2).toString(8);\r\n            // DOM assignment to Hexadecimal conversion\r\n            document.getElementById('hexadecimal').innerHTML = parseInt(binary, 2).toString(16);\r\n            // DOM assignment to Decimal conversion\r\n            document.getElementById('decimal').innerHTML = parseInt(binary, 2).toString(10);\r\n            /* Hack: show ASCII printable character(s) for each 8 bits\r\n             DOM assignment by converting decimal https://www.w3schools.com/jsref/jsref_fromcharcode.asplook\r\n             below ASCII for more ideas of where to make changes\r\n             */\r\n        }\r\n\r\n        // algorithm to convert decimal to base using division and remainder\r\n        function decimal_2_base(decimal, base) {\r\n            let conversion = \"\";\r\n            // loop to convert to base\r\n            do {\r\n                let digit = decimal % base;\r\n                conversion = \"\" + digit + conversion; // what does this do?\r\n                decimal = ~~(decimal / base);         // what does this do?  what is ~~?\r\n            } while (decimal > 0);                  // why while at the end?\r\n            // loop to pad with zeros\r\n            if (base === 2) {                        // only pad for binary conversions\r\n                for (let i = 0; conversion.length < BITS; i++) {\r\n                    conversion = \"0\" + conversion;\r\n                }\r\n            }\r\n            return conversion;\r\n        }\r\n\r\n        // toggle selected bit and recalculate\r\n        function toggleBit(i) {\r\n            //alert(\"Digit action: \" + i );\r\n            const dig = document.getElementById('digit' + i);\r\n            const image = document.getElementById('bulb' + i);\r\n            const butt = document.getElementById('butt' + i);\r\n            // Change digit and visual\r\n            if (image.src.match(\"{{ imgBulbOn }}\")) {\r\n                dig.value = 0;\r\n                image.src = \"{{ imgBulbOff }}\";\r\n                butt.innerHTML = \"{{ msgTurnOn }}\";\r\n            } else {\r\n                dig.value = 1;\r\n                image.src = \"{{ imgBulbOn }}\";\r\n                butt.innerHTML = \"{{ msgTurnOff }}\";\r\n            }\r\n            // Binary numbers\r\n            const binary = getBits();\r\n            setConversions(binary);\r\n        }\r\n        // add is positive integer, subtract is negative integer\r\n        function add(n) {\r\n            let binary = getBits();\r\n            // convert to decimal and do math\r\n            let decimal = parseInt(binary, 2);\r\n            if (n > 0) {  // PLUS\r\n                decimal = MAX === decimal ? 0 : decimal += n; // OVERFLOW or PLUS\r\n            } else  {     // MINUS\r\n                decimal = 0 === decimal ? MAX : decimal += n; // OVERFLOW or MINUS\r\n            }\r\n            // convert the result back to binary\r\n            binary = decimal_2_base(decimal, 2);\r\n            // update conversions\r\n            setConversions(binary);\r\n            // update bits\r\n            for (let i = 0; i < binary.length; i++) {\r\n                let digit = binary.substr(i, 1);\r\n                document.getElementById('digit' + i).value = digit;\r\n                if (digit === \"1\") {\r\n                    document.getElementById('bulb' + i).src = \"{{ imgBulbOn }}\";\r\n                    document.getElementById('butt' + i).innerHTML = \"{{ msgTurnOff }}\";\r\n                } else {\r\n                    document.getElementById('bulb' + i).src = \"{{ imgBulbOff }}\";\r\n                    document.getElementById('butt' + i).innerHTML = \"{{ msgTurnOn }}\";\r\n                }\r\n            }\r\n        }\r\n    </script>\r\n{% endblock %}\r\n\r\n{% block content %}\r\n    <h1 class=\"text-center\">Binary Math with Conversions</h1>\r\n    <div class=\"container\">\r\n        <div class=\"row justify-content-md-center\">\r\n\r\n            <div class=\"col-8\">\r\n                <table class=\"table\">\r\n                    <tr id=\"table\">\r\n                        <th>Plus</th>\r\n                        <th>Binary</th>\r\n                        <th>Octal</th>\r\n                        <th>Hexadecimal</th>\r\n                        <th>Decimal</th>\r\n                        <!-- Hack: display ASCII label for printable character(s)  -->\r\n                        <th>Minus</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <td><button type=\"button\" id=\"add1\" onclick=\"add(1)\">+1</button></td>\r\n                        <td id=\"binary\">00000000</td>\r\n                        <td id=\"octal\">0</td>\r\n                        <td id=\"hexadecimal\">0</td>\r\n                        <td id=\"decimal\">0</td>\r\n                        <!-- Hack: display ASCII printable character(s)  -->\r\n                        <td><button type=\"button\" id=\"sub1\" onclick=\"add(-1)\">-1</button></td>\r\n\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n\r\n            <div class=\"col-12\">\r\n                <table class=\"table\">\r\n                    <tr>\r\n                        {% for i in range(BITS) %}\r\n                            <td><img class=\"img-responsive py-3\" id=\"bulb{{i}}\" src=\"{{ imgBulbOff }}\" alt=\"\" width=\"40\" height=\"Auto\">\r\n                                <button type=\"button\" id=\"butt{{i}}\" onclick=\"toggleBit('{{i}}')\">{{ msgTurnOn }}</button>\r\n                            </td>\r\n                        {% endfor %}\r\n                    </tr>\r\n                    <tr>\r\n                        {% for i in range(BITS) %}\r\n                            <td><input type='text' id='digit{{i}}' Value=\"0\" size=\"1\" readonly></td>\r\n                        {% endfor %}\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/clicker.html b/templates/clicker.html
--- a/templates/clicker.html	(revision 05283516330f1dd7b74eb8a94de446c2f0ffac98)
+++ b/templates/clicker.html	(date 1631212294691)
@@ -145,7 +145,7 @@
                 <table class="table">
                     <tr>
                         {% for i in range(BITS) %}
-                            <td><img class="img-responsive py-3" id="bulb{{i}}" src="{{ imgBulbOff }}" alt="" width="40" height="Auto">
+                            <td><img class="img-responsive py-3" id="bulb{{i}}" src="{{ imgBulbOff }}" alt="" width="80" height="Auto">
                                 <button type="button" id="butt{{i}}" onclick="toggleBit('{{i}}')">{{ msgTurnOn }}</button>
                             </td>
                         {% endfor %}
